<form
  netlify-honeypot="bot-field"
  data-netlify="true"
  id="contact-form"
  name="Contact Form Submission"
  method="POST"
  class="max-w-6xl mx-auto sm:px-6 lg:px-8"
>
  <div class="mt-8 overflow-hidden">
    <div class="grid grid-cols-1 md:grid-cols-2">
      <div class="p-6 mr-2 bg-gray-100 dark:bg-gray-800 sm:rounded-lg">
        <h1
          class="text-4xl sm:text-5xl text-gray-800 dark:text-white font-extrabold tracking-tight"
        >
          Get in touch
        </h1>
        <p
          class="text-normal text-lg sm:text-2xl font-medium text-gray-600 dark:text-gray-400 mt-2"
        >
          Fill in the form to start a conversation
        </p>

        <div class="flex items-center mt-8 text-gray-600 dark:text-gray-400">
          <svg
            fill="none"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="1.5"
            viewBox="0 0 24 24"
            class="w-8 h-8 text-gray-500"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.5"
              d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
            ></path>
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.5"
              d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
          </svg>
          <div class="ml-4 text-md tracking-wide font-semibold w-40">
            Acme Inc, Street, State, Postal Code
          </div>
        </div>

        <div class="flex items-center mt-4 text-gray-600 dark:text-gray-400">
          <svg
            fill="none"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="1.5"
            viewBox="0 0 24 24"
            class="w-8 h-8 text-gray-500"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.5"
              d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
            ></path>
          </svg>
          <div class="ml-4 text-md tracking-wide font-semibold w-40">
            +44 1234567890
          </div>
        </div>

        <div class="flex items-center mt-2 text-gray-600 dark:text-gray-400">
          <svg
            fill="none"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="1.5"
            viewBox="0 0 24 24"
            class="w-8 h-8 text-gray-500"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.5"
              d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
            ></path>
          </svg>
          <div class="ml-4 text-md tracking-wide font-semibold w-40">
            info@acme.org
          </div>
        </div>
      </div>
      <!-- It is possible to use the :valid and :invalid CSS pseudo-classes to style a <form> element -->
      <div class="flex flex-col">
        <input
          aria-hidden="true"
          type="hidden"
          name="form-name"
          value="Contact Form Submission"
        />

        <label for="name" class="hidden">Name</label>
        <input
          type="name"
          name="name"
          id="name"
          placeholder="Name"
          class="w-100 mt-2 py-3 px-3 rounded-lg bg-white dark:bg-gray-800 border border-gray-400 dark:border-gray-700 text-gray-800 font-semibold focus:border-indigo-500 focus:outline-none"
        />
        <span id="name_error"></span>

        <label for="email" class="hidden">Email</label>
        <input
          type="email"
          name="email"
          id="email"
          placeholder="Email"
          class="w-100 mt-2 py-3 px-3 rounded-lg bg-white dark:bg-gray-800 border border-gray-400 dark:border-gray-700 text-gray-800 font-semibold focus:border-indigo-500 focus:outline-none"
        />
        <span id="email_error"></span>
        <label for="message" class="hidden">message</label>
        <input
          type="text"
          name="message"
          id="message"
          placeholder="Message"
          class="w-100 mt-2 py-3 px-3 rounded-lg bg-white dark:bg-gray-800 border border-gray-400 dark:border-gray-700 text-gray-800 font-semibold focus:border-indigo-500 focus:outline-none"
        />

        <button
          id="submitContactFormBtn"
          type="submit"
          class="md:w-32 bg-blue-600 hover:bg-blue-dark text-white font-bold py-3 px-6 rounded-lg mt-3 hover:bg-indigo-500 transition ease-in-out duration-300 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none"
        >
          Submit
        </button>
      </div>
    </div>
  </div>
</form>

<script>
  // serialize form data into an object
  // function serialize(form) {
  // 	var obj = {};
  // 	var formData = new FormData(form);
  // 	for (var key of formData.keys()) {
  // 		obj[key] = formData.get(key);
  // 	}
  // 	return obj;
  // }

  /**
   * Helper function to POST data as JSON with Fetch.
   */
  async function postFormFieldsAsJson({ url, formData }) {
    //Create an object from the form data entries
    let formDataObject = Object.fromEntries(formData.entries());
    // Format the plain form data as JSON
    let formDataJsonString = JSON.stringify(formDataObject);
    console.log('formDataJsonString', formDataJsonString);
    //Set the fetch options (headers, body)
    let fetchOptions = {
      //HTTP method set to POST.
      method: 'POST',
      //Set the headers that specify you're sending a JSON body request and accepting JSON response
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
      },
      cors: 'no-cors',
      // POST request body as JSON string.
      body: formDataJsonString,
    };

    //Get the response body as JSON.
    //If the response was not OK, throw an error.
    let res = await fetch(url, fetchOptions);

    //If the response is not ok throw an error (for debugging)
    if (!res.ok) {
      let error = await res.text();
      throw new Error(error);
    }
    //If the response was OK, return the response body.
    return res.json();
  }

  const handleSubmit = async (event) => {
    event.preventDefault();

    //Get the entire form fields
    const form = event.target;

    // let url = '/.netlify/functions/contact';
    let url = '/api/contactForm';
    try {
      /**
       * Takes all the form fields and make the field values
       * available through a `FormData` instance.
       */
      let formData = new FormData(form);

      /**
       * The `postFormFieldsAsJson()` function in the next step.
       */
      let responseData = await postFormFieldsAsJson({ url, formData });

      //Destructure the response data
      let { serverDataResponse } = responseData;

      form.reset();
      //disable the submit button
      document.getElementById('submitContactFormBtn').disabled = true;

      //Display the response data in the console (for debugging)
      console.log(serverDataResponse);
    } catch (error) {
      //If an error occurs display it in the console (for debugging)
      console.error(error);
    }
  };

  const contactForm = document
    .getElementById('contact-form')
    .addEventListener('submit', handleSubmit);
</script>
